// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: StandardsProtoBufs/Certificate.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Proto.Standards {

  /// <summary>Holder for reflection information generated from StandardsProtoBufs/Certificate.proto</summary>
  public static partial class CertificateReflection {

    #region Descriptor
    /// <summary>File descriptor for StandardsProtoBufs/Certificate.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CertificateReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiRTdGFuZGFyZHNQcm90b0J1ZnMvQ2VydGlmaWNhdGUucHJvdG8SD1Byb3Rv",
            "LlN0YW5kYXJkcxonU3RhbmRhcmRzUHJvdG9CdWZzL0RhdGVUaW1lT2Zmc2V0",
            "LnByb3RvGh1TdGFuZGFyZHNQcm90b0J1ZnMvVVVJRC5wcm90byKEAwoLQ2Vy",
            "dGlmaWNhdGUSLgoPQ2VydGlmaWNhdGVVdWlkGAEgASgLMhUuUHJvdG8uU3Rh",
            "bmRhcmRzLlVVSUQSJwoIUm9vdEd1aWQYAiABKAsyFS5Qcm90by5TdGFuZGFy",
            "ZHMuVVVJRBIzCghDZXJ0VHlwZRgDIAEoDjIhLlByb3RvLlN0YW5kYXJkcy5D",
            "ZXJ0aWZpY2F0ZVR5cGVzEhAKCGlzU2lnbmVyGAQgASgIEhgKEERpc3Rpbmd1",
            "aXNlZE5hbWUYBSABKAkSKQoKU2lnbmVyVXVpZBgGIAEoCzIVLlByb3RvLlN0",
            "YW5kYXJkcy5VVUlEEhEKCVNpZ25hdHVyZRgHIAEoDBIyCglTdGFydFRpbWUY",
            "CCABKAsyHy5Qcm90by5TdGFuZGFyZHMuRGF0ZVRpbWVPZmZzZXQSMAoHRW5k",
            "VGltZRgJIAEoCzIfLlByb3RvLlN0YW5kYXJkcy5EYXRlVGltZU9mZnNldBIX",
            "Cg9DZXJ0aWZpY2F0ZUJvZHkYCiABKAwqPgoQQ2VydGlmaWNhdGVUeXBlcxII",
            "CgRST09UEAASEAoMSU5URVJNRURJQVRFEAESDgoKQ09ERVNJR05FUhACYgZw",
            "cm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Proto.Standards.DateTimeOffsetReflection.Descriptor, global::Proto.Standards.UUIDReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Proto.Standards.CertificateTypes), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Standards.Certificate), global::Proto.Standards.Certificate.Parser, new[]{ "CertificateUuid", "RootGuid", "CertType", "IsSigner", "DistinguisedName", "SignerUuid", "Signature", "StartTime", "EndTime", "CertificateBody" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum CertificateTypes {
    [pbr::OriginalName("ROOT")] Root = 0,
    [pbr::OriginalName("INTERMEDIATE")] Intermediate = 1,
    [pbr::OriginalName("CODESIGNER")] Codesigner = 2,
  }

  #endregion

  #region Messages
  public sealed partial class Certificate : pb::IMessage<Certificate> {
    private static readonly pb::MessageParser<Certificate> _parser = new pb::MessageParser<Certificate>(() => new Certificate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Certificate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Standards.CertificateReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Certificate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Certificate(Certificate other) : this() {
      certificateUuid_ = other.certificateUuid_ != null ? other.certificateUuid_.Clone() : null;
      rootGuid_ = other.rootGuid_ != null ? other.rootGuid_.Clone() : null;
      certType_ = other.certType_;
      isSigner_ = other.isSigner_;
      distinguisedName_ = other.distinguisedName_;
      signerUuid_ = other.signerUuid_ != null ? other.signerUuid_.Clone() : null;
      signature_ = other.signature_;
      startTime_ = other.startTime_ != null ? other.startTime_.Clone() : null;
      endTime_ = other.endTime_ != null ? other.endTime_.Clone() : null;
      certificateBody_ = other.certificateBody_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Certificate Clone() {
      return new Certificate(this);
    }

    /// <summary>Field number for the "CertificateUuid" field.</summary>
    public const int CertificateUuidFieldNumber = 1;
    private global::Proto.Standards.UUID certificateUuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Standards.UUID CertificateUuid {
      get { return certificateUuid_; }
      set {
        certificateUuid_ = value;
      }
    }

    /// <summary>Field number for the "RootGuid" field.</summary>
    public const int RootGuidFieldNumber = 2;
    private global::Proto.Standards.UUID rootGuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Standards.UUID RootGuid {
      get { return rootGuid_; }
      set {
        rootGuid_ = value;
      }
    }

    /// <summary>Field number for the "CertType" field.</summary>
    public const int CertTypeFieldNumber = 3;
    private global::Proto.Standards.CertificateTypes certType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Standards.CertificateTypes CertType {
      get { return certType_; }
      set {
        certType_ = value;
      }
    }

    /// <summary>Field number for the "isSigner" field.</summary>
    public const int IsSignerFieldNumber = 4;
    private bool isSigner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSigner {
      get { return isSigner_; }
      set {
        isSigner_ = value;
      }
    }

    /// <summary>Field number for the "DistinguisedName" field.</summary>
    public const int DistinguisedNameFieldNumber = 5;
    private string distinguisedName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DistinguisedName {
      get { return distinguisedName_; }
      set {
        distinguisedName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SignerUuid" field.</summary>
    public const int SignerUuidFieldNumber = 6;
    private global::Proto.Standards.UUID signerUuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Standards.UUID SignerUuid {
      get { return signerUuid_; }
      set {
        signerUuid_ = value;
      }
    }

    /// <summary>Field number for the "Signature" field.</summary>
    public const int SignatureFieldNumber = 7;
    private pb::ByteString signature_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Signature {
      get { return signature_; }
      set {
        signature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "StartTime" field.</summary>
    public const int StartTimeFieldNumber = 8;
    private global::Proto.Standards.DateTimeOffset startTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Standards.DateTimeOffset StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "EndTime" field.</summary>
    public const int EndTimeFieldNumber = 9;
    private global::Proto.Standards.DateTimeOffset endTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Standards.DateTimeOffset EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "CertificateBody" field.</summary>
    public const int CertificateBodyFieldNumber = 10;
    private pb::ByteString certificateBody_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CertificateBody {
      get { return certificateBody_; }
      set {
        certificateBody_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Certificate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Certificate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CertificateUuid, other.CertificateUuid)) return false;
      if (!object.Equals(RootGuid, other.RootGuid)) return false;
      if (CertType != other.CertType) return false;
      if (IsSigner != other.IsSigner) return false;
      if (DistinguisedName != other.DistinguisedName) return false;
      if (!object.Equals(SignerUuid, other.SignerUuid)) return false;
      if (Signature != other.Signature) return false;
      if (!object.Equals(StartTime, other.StartTime)) return false;
      if (!object.Equals(EndTime, other.EndTime)) return false;
      if (CertificateBody != other.CertificateBody) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (certificateUuid_ != null) hash ^= CertificateUuid.GetHashCode();
      if (rootGuid_ != null) hash ^= RootGuid.GetHashCode();
      if (CertType != 0) hash ^= CertType.GetHashCode();
      if (IsSigner != false) hash ^= IsSigner.GetHashCode();
      if (DistinguisedName.Length != 0) hash ^= DistinguisedName.GetHashCode();
      if (signerUuid_ != null) hash ^= SignerUuid.GetHashCode();
      if (Signature.Length != 0) hash ^= Signature.GetHashCode();
      if (startTime_ != null) hash ^= StartTime.GetHashCode();
      if (endTime_ != null) hash ^= EndTime.GetHashCode();
      if (CertificateBody.Length != 0) hash ^= CertificateBody.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (certificateUuid_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CertificateUuid);
      }
      if (rootGuid_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(RootGuid);
      }
      if (CertType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) CertType);
      }
      if (IsSigner != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsSigner);
      }
      if (DistinguisedName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(DistinguisedName);
      }
      if (signerUuid_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(SignerUuid);
      }
      if (Signature.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(Signature);
      }
      if (startTime_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(StartTime);
      }
      if (endTime_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(EndTime);
      }
      if (CertificateBody.Length != 0) {
        output.WriteRawTag(82);
        output.WriteBytes(CertificateBody);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (certificateUuid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CertificateUuid);
      }
      if (rootGuid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RootGuid);
      }
      if (CertType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CertType);
      }
      if (IsSigner != false) {
        size += 1 + 1;
      }
      if (DistinguisedName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DistinguisedName);
      }
      if (signerUuid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SignerUuid);
      }
      if (Signature.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Signature);
      }
      if (startTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartTime);
      }
      if (endTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndTime);
      }
      if (CertificateBody.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CertificateBody);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Certificate other) {
      if (other == null) {
        return;
      }
      if (other.certificateUuid_ != null) {
        if (certificateUuid_ == null) {
          CertificateUuid = new global::Proto.Standards.UUID();
        }
        CertificateUuid.MergeFrom(other.CertificateUuid);
      }
      if (other.rootGuid_ != null) {
        if (rootGuid_ == null) {
          RootGuid = new global::Proto.Standards.UUID();
        }
        RootGuid.MergeFrom(other.RootGuid);
      }
      if (other.CertType != 0) {
        CertType = other.CertType;
      }
      if (other.IsSigner != false) {
        IsSigner = other.IsSigner;
      }
      if (other.DistinguisedName.Length != 0) {
        DistinguisedName = other.DistinguisedName;
      }
      if (other.signerUuid_ != null) {
        if (signerUuid_ == null) {
          SignerUuid = new global::Proto.Standards.UUID();
        }
        SignerUuid.MergeFrom(other.SignerUuid);
      }
      if (other.Signature.Length != 0) {
        Signature = other.Signature;
      }
      if (other.startTime_ != null) {
        if (startTime_ == null) {
          StartTime = new global::Proto.Standards.DateTimeOffset();
        }
        StartTime.MergeFrom(other.StartTime);
      }
      if (other.endTime_ != null) {
        if (endTime_ == null) {
          EndTime = new global::Proto.Standards.DateTimeOffset();
        }
        EndTime.MergeFrom(other.EndTime);
      }
      if (other.CertificateBody.Length != 0) {
        CertificateBody = other.CertificateBody;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (certificateUuid_ == null) {
              CertificateUuid = new global::Proto.Standards.UUID();
            }
            input.ReadMessage(CertificateUuid);
            break;
          }
          case 18: {
            if (rootGuid_ == null) {
              RootGuid = new global::Proto.Standards.UUID();
            }
            input.ReadMessage(RootGuid);
            break;
          }
          case 24: {
            CertType = (global::Proto.Standards.CertificateTypes) input.ReadEnum();
            break;
          }
          case 32: {
            IsSigner = input.ReadBool();
            break;
          }
          case 42: {
            DistinguisedName = input.ReadString();
            break;
          }
          case 50: {
            if (signerUuid_ == null) {
              SignerUuid = new global::Proto.Standards.UUID();
            }
            input.ReadMessage(SignerUuid);
            break;
          }
          case 58: {
            Signature = input.ReadBytes();
            break;
          }
          case 66: {
            if (startTime_ == null) {
              StartTime = new global::Proto.Standards.DateTimeOffset();
            }
            input.ReadMessage(StartTime);
            break;
          }
          case 74: {
            if (endTime_ == null) {
              EndTime = new global::Proto.Standards.DateTimeOffset();
            }
            input.ReadMessage(EndTime);
            break;
          }
          case 82: {
            CertificateBody = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
